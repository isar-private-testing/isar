name: Isar release

on:
  push:
    tags:
      - "*"

jobs:
  build_binaries:
    name: Build Binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: libisar_android_arm64.so
            script: build_android.sh
          - os: ubuntu-latest
            artifact_name: libisar_android_armv7.so
            script: build_android.sh armv7
          - os: ubuntu-latest
            artifact_name: libisar_android_x64.so
            script: build_android.sh x64
          - os: macos-latest
            artifact_name: isar_ios.xcframework.zip
            script: build_ios.sh
          - os: ubuntu-20.04
            artifact_name: libisar_linux_x64.so
            script: build_linux.sh x64
          - os: macos-latest
            artifact_name: libisar_macos.dylib
            script: build_macos.sh
          - os: windows-latest
            artifact_name: isar_windows_x64.dll
            script: build_windows.sh x64
          - os: ubuntu-latest
            artifact_name: isar.wasm
            script: build_wasm.sh
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Prepare Build
        uses: ./.github/actions/prepare-build
      - name: Set Isar Version
        run: echo "ISAR_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Build binary
        run: bash tool/${{ matrix.script }} ${{ matrix.parameters }}
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

  upload_to_repo:
    needs: build_binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: binaries/
      - name: List contents of downloaded artifacts
        run: |
          echo "Listing contents of all downloaded artifacts..."
          ls -Rlh binaries/
          echo "Listing complete."
      - name: Setup Git and clone target repository
        run: |
          git config --global user.email "vicente.russo@gmail.com"
          git config --global user.name "GitHub Actions"
          git clone https://github.com/isar-private-testing/binaries repo
          cd repo
          git checkout main || git checkout -b main
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
      - name: Copy binaries to repository and push
        run: |
          # Ensure we're in the right directory where the repo was cloned
          cd repo
          # Extract tag name from ref_name, assuming it's in the format "refs/tags/<tag_name>"
          ISAR_VERSION=$(echo "${{ github.ref_name }}" | sed 's/refs\/tags\///')
          echo "Deploying binaries to version: $ISAR_VERSION"
          # Create a directory for the ISAR_VERSION if it doesn't already exist
          mkdir -p "$ISAR_VERSION"
          # Enable globstar to use the ** pattern for recursive file matching
          shopt -s globstar
          # Copy all binaries from the downloaded artifacts to the ISAR_VERSION directory
          cp ../binaries/**/* "$ISAR_VERSION"
          git add .
          git commit -m "Deploy binaries for version $ISAR_VERSION" || echo "No changes to commit"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/isar-private-testing/binaries.git main
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}